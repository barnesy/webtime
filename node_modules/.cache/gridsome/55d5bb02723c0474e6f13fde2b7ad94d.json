{"remainingRequest":"/Users/barnesy/Projects/webtime/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/barnesy/Projects/component-library/lib/templates/ContentfulProject.vue?vue&type=style&index=0&id=5ee807d3&lang=css&","dependencies":[{"path":"/Users/barnesy/Projects/component-library/lib/templates/ContentfulProject.vue","mtime":1662568257701},{"path":"/Users/barnesy/Projects/webtime/node_modules/css-loader/dist/cjs.js","mtime":1650484540907},{"path":"/Users/barnesy/Projects/webtime/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1659976370839},{"path":"/Users/barnesy/Projects/webtime/node_modules/postcss-loader/src/index.js","mtime":1650484541426},{"path":"/Users/barnesy/Projects/webtime/node_modules/cache-loader/dist/cjs.js","mtime":1650484540840},{"path":"/Users/barnesy/Projects/webtime/node_modules/vue-loader/lib/index.js","mtime":1659976370839}],"contextDependencies":[],"result":["\n#map {\n  min-height: 60rem;\n  background: white;\n  width: 100%;\n  margin-top: 6rem;\n  border: 1rem solid var(--light-grey);\n}\n",{"version":3,"sources":["ContentfulProject.vue"],"names":[],"mappings":";AAiPA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ContentfulProject.vue","sourceRoot":"../component-library/lib/templates","sourcesContent":["<template>\n  <Directory class=\"dark\" :bgImage=\"'url(' + $page.projects.headerImage.file.url + ')' \">\n\n  <template #page-header>\n    <Header class=\"v4\"  borderColor=\"var(--dark-teal)\">\n      <template>{{ $page.projects.projectName }}</template>\n      <template #support>{{ $page.projects.projectOverview }} </template>\n      <template #context></template>\n    </Header>\n  </template>\n\n  <PageSection padding=\"3rem 3rem 8rem\" class=\"narrow\">\n    <template #title>Project Details</template>\n    <template>\n      <div id=\"map\"></div>\n      <div v-html=\"content\" />\n    </template>\n  </PageSection>\n\n  <PageSection padding=\"3rem 3rem 8rem\">\n    <template #title>Stay Connected </template>\n\n    <template>\n      <MultiColumn>\n        <Column colColor=\"var(--light-grey)\">\n          <template #columnTitle>On social media</template>\n          <template>Look for project news and updates on <a :href=\"'https://twitter.com/' + $page.projects.outreach[0].accountName\">Twitter</a>.</template>\n        </Column>\n\n        <Column colColor=\"var(--light-grey)\">\n          <template #columnTitle>By phone</template>\n          <template>{{ $page.projects.phone}}</template>\n        </Column>\n\n        <Column colColor=\"var(--light-grey)\">\n          <template #columnTitle>By email</template>\n          <template><a :href=\"'mailto:'+ $page.projects.email\">Email the project team</a></template>\n        </Column>\n      </MultiColumn>\n    </template>\n  </PageSection>\n\n  <PageSection v-if=\"$page.projects.pdfs[0]\" bgColor=\"var(--light-grey)\">\n    <template #title>Project Information</template>\n\n    <template>\n      <CardGroup>\n        <Card class=\"small\" v-for=\"doc in $page.projects.pdfs\" :key=\"doc.id\" :url=\"doc.file.url\" >\n          <template #image>\n            <g-image src=\"https://images.ctfassets.net/ncgri9n8y2w0/5ckhKdIui5kZyft5iVsJd2/a81e325650223ea1b32096ec96ea76ba/check-list.svg\" />\n          </template>\n\n          <template>\n            {{ doc.title }}\n          </template>\n        </Card>\n      </CardGroup>\n    </template>\n  </PageSection>\n\n  <Impact />\n\n  <PageSection bgColor=\"var(--light-grey)\" padding=\"6rem 3rem 6rem\">\n    <template><a :href=\"'mailto:'+ $page.projects.contactEmail\">Media Contact: {{$page.projects.contact}}</a></template>\n  </PageSection>\n\n  </Directory>\n</template>\n\n<page-query>\nquery ($path: String!){\n\tprojects:contentfulProject(path: $path) {\n    projectName\n    slug\n    headerImage {\n      file {\n        url\n      }\n    }\n    projectOverview\n    projectDetails\n    territory\n    contact\n    contactEmail\n    phone\n    email\n    pdfs {\n      id\n      title\n      description\n      file {\n        url\n      }\n    }\n    geoJson {\n      file {\n        url\n      }\n    }\n    outreach {\n      icon {\n        file {\n          url\n        }\n      }\n      accountName\n      url\n    }\n  }\n}\n</page-query>\n\n<script>\nlet placeholder =  \"https://images.ctfassets.net/ncgri9n8y2w0/4TrUKxtHvhJEMH1Ki0P8GO/c61275e1dbcea68f5600dbfe1211e7de/dark-green.png\"\n\nconst axios = require(\"axios\");\n\nimport MarkdownIt from 'markdown-it'\n\nimport mapboxgl from '!mapbox-gl'\nimport 'mapbox-gl/dist/mapbox-gl.css'\n\nmapboxgl.accessToken = process.env.GRIDSOME_MAPBOX_TOKEN\nvar map = {}\nlet bounds = [[43.520696,-96.6652837],[29.52553,-74.9826837]]\n\nexport default {\n  metaInfo() {\n    return {\n      title: \"Projects: \" + this.$page.projects.projectName,\n      meta: [\n        {\n          name: 'description',\n          content: this.$page.projects.projectOverview\n        },\n        {\n          property: 'og:title',\n          content: \"Projects: \" + this.$page.projects.projectName\n        },\n        {\n          property: 'og:description',\n          content: this.$page.projects.projectOverview\n        },\n        {\n          property: 'og:image',\n          content: \"https:\" + this.ogImage\n        },\n        {\n          property: 'og:url',\n          content: \"https://www.southerncompanygas.com/safety/\" + this.$page.projects.slug\n        },\n      ],\n    }\n  },\n\n  methods: {\n    convertTerritory: function(string) {\n      return (string.toString())\n    }\n  },\n  data() {\n    return {\n      ogImage: placeholder\n    }\n  },\n  computed: {\n    content() {\n      const md = new MarkdownIt()\n      return md.render(this.$page.projects.projectDetails)\n    },\n  },\n  mounted() {\n    let img = this.$page.projects.headerImage\n    this.ogImage = (img) ?  img.file.url : placeholder\n\n    let geoJsonURL = 'https:' + this.$page.projects.geoJson.file.url\n\n    axios.get(geoJsonURL).then(resp => {\n      let data = resp.data\n\n      let startSegment = data[0]\n      let endSegment = data[data.length - 1]\n\n      let startCoord = startSegment.geometry.coordinates[0][0]\n      let lastCoord = endSegment.geometry.coordinates[endSegment.geometry.coordinates.length - 1]\n      let endCoord =  lastCoord[lastCoord.length - 1]\n\n\n      let bounds = [\n        startCoord,\n        endCoord\n      ]\n\n      this.map.fitBounds(bounds, {padding: 150})\n\n      const start = new mapboxgl.Marker()\n        .setLngLat(startCoord)\n        .addTo(this.map);\n\n      const end = new mapboxgl.Marker()\n        .setLngLat(endCoord)\n        .addTo(this.map);\n\n      for(let i=0; i<data.length; i++){\n\n        this.map.on('load', () => {\n          this.map.addSource('route'+i, {\n            'type': 'geojson',\n            'data': data[i]\n          });\n\n          this.map.addLayer({\n              'id': 'route'+i,\n              'type': 'line',\n              'source': 'route'+i,\n              'layout': {\n              'line-join': 'round',\n              'line-cap': 'round'\n            },\n            'paint': {\n              'line-color': 'blue',\n              'line-width': 8\n            }\n          });\n        })\n      }\n    });\n\n    this.map = new mapboxgl.Map({\n      container: 'map',\n      style: 'mapbox://styles/mapbox/streets-v11',\n      center: [-84.13061823899994,34.05572881300003],\n      zoom: 14,\n    })\n\n    this.map.addControl(new mapboxgl.NavigationControl());\n  }\n}\n</script>\n\n<style>\n#map {\n  min-height: 60rem;\n  background: white;\n  width: 100%;\n  margin-top: 6rem;\n  border: 1rem solid var(--light-grey);\n}\n</style>"]}]}